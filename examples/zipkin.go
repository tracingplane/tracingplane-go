package examples

import (
	"github.com/tracingplane/tracingplane-go/bdl"
	"github.com/tracingplane/tracingplane-go/baggageprotocol"
	"github.com/tracingplane/tracingplane-go/atomlayer"
	"sort"
)

// An example of a class that would be generated by BDL for Zipkin

type ZipkinMetadata struct {
	TraceID      *int64              // sfixed64 TraceID = 0;
	SpanID       *int64              // sfixed64 SpanID = 1;
	ParentSpanID *int64              // sfixed64 ParentSpanID = 2;
	Sampled      *bool               // taint Sampled = 3;
	Tags         map[string](string) // map<string, string> Tags = 4;
	overflowed   bool
	unknown      []atomlayer.Atom
}

func (zipkinMetadata *ZipkinMetadata) HasTraceID() bool {
	return zipkinMetadata.TraceID != nil
}

func (zipkinMetadata *ZipkinMetadata) GetTraceID() int64 {
	return *zipkinMetadata.TraceID
}

func (zipkinMetadata *ZipkinMetadata) SetTraceID(traceID int64)  {
	zipkinMetadata.TraceID = &traceID
}

func (zipkinMetadata *ZipkinMetadata) HasSpanID() bool {
	return zipkinMetadata.SpanID != nil
}

func (zipkinMetadata *ZipkinMetadata) GetSpanID() int64 {
	return *zipkinMetadata.SpanID
}

func (zipkinMetadata *ZipkinMetadata) SetSpanID(spanID int64)  {
	zipkinMetadata.SpanID = &spanID
}

func (zipkinMetadata *ZipkinMetadata) HasParentSpanID() bool {
	return zipkinMetadata.ParentSpanID != nil
}

func (zipkinMetadata *ZipkinMetadata) GetParentSpanID() int64 {
	return *zipkinMetadata.ParentSpanID
}

func (zipkinMetadata *ZipkinMetadata) SetParentSpanID(parentSpanID int64)  {
	zipkinMetadata.ParentSpanID = &parentSpanID
}

func (zipkinMetadata *ZipkinMetadata) HasSampled() bool {
	return zipkinMetadata.Sampled != nil
}

func (zipkinMetadata *ZipkinMetadata) GetSampled() bool {
	return *zipkinMetadata.Sampled
}

func (zipkinMetadata *ZipkinMetadata) SetSampled(sampled bool)  {
	zipkinMetadata.Sampled = &sampled
}

func (zipkinMetadata *ZipkinMetadata) Overflowed() bool {
	return zipkinMetadata.overflowed
}

func (zipkinMetadata *ZipkinMetadata) Read(r *baggageprotocol.Reader) {
	// TraceID
	if r.EnterIndexed(0) {
		zipkinMetadata.TraceID = bdl.ReadInt64Fixed(r.Next());
		r.Exit()
	}

	// SpanID
	if r.EnterIndexed(1) {
		zipkinMetadata.SpanID = bdl.ReadInt64Fixed(r.Next());
		r.Exit()
	}

	// ParentSpanID
	if r.EnterIndexed(2) {
		zipkinMetadata.ParentSpanID = bdl.ReadInt64Fixed(r.Next());
		r.Exit()
	}

	// Sampled
	if r.EnterIndexed(3) {
		zipkinMetadata.Sampled = bdl.ReadTaint(r.Next())
		r.Exit()
	}

	// Tags
	if r.EnterIndexed(4) {
		zipkinMetadata.Tags = make(map[string](string))
		for {
			key := r.Enter()
			if key == nil { break }

			value := r.Next()
			if value != nil {
				tagsKey := string(key[1:])
				tagsValue := string(value)
				zipkinMetadata.Tags[tagsKey] = tagsValue
			}
			r.Exit()
		}
	}

	// Overflow
	zipkinMetadata.overflowed = r.Overflowed
}

func (zipkinMetadata *ZipkinMetadata) Write(w *baggageprotocol.Writer) {
	// TraceID
	if zipkinMetadata.TraceID != nil {
		w.Enter(0)
		w.Write(bdl.WriteInt64Fixed(*zipkinMetadata.TraceID))
		w.Exit()
	}

	// SpanID
	if zipkinMetadata.SpanID != nil {
		w.Enter(1)
		w.Write(bdl.WriteInt64Fixed(*zipkinMetadata.SpanID))
		w.Exit()
	}

	// ParentSpanID
	if zipkinMetadata.ParentSpanID != nil {
		w.Enter(2)
		w.Write(bdl.WriteInt64Fixed(*zipkinMetadata.ParentSpanID))
		w.Exit()
	}

	// Sampled
	if zipkinMetadata.Sampled != nil {
		w.Enter(3)
		w.Write(bdl.WriteTaint(*zipkinMetadata.Sampled))
		w.Exit()
	}

	// Tags
	if len(zipkinMetadata.Tags) > 0 {
		var tagKeys []atomlayer.Atom
		for tagKey := range(zipkinMetadata.Tags) {
			tagKeys = append(tagKeys, atomlayer.Atom(tagKey))
		}

		sort.Sort(baggageprotocol.LexicographicAtomSorter(tagKeys))

		w.Enter(4)
		for _,tagKey := range(tagKeys) {
			tagValue := []byte(zipkinMetadata.Tags[string(tagKey)])
			w.EnterKey(tagKey)
			w.Write(tagValue)
			w.Exit()
		}
		w.Exit()
	}

	// Overflow
	if zipkinMetadata.overflowed {
		w.MarkOverflow()
	}
}

func (zipkinMetadata *ZipkinMetadata) SetUnprocessedAtoms(atoms []atomlayer.Atom) {
	zipkinMetadata.unknown = atoms
}

func (zipkinMetadata *ZipkinMetadata) GetUnprocessedAtoms() []atomlayer.Atom {
	return zipkinMetadata.unknown
}