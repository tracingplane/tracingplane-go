package examples

import (
	"github.com/tracingplane/tracingplane-go/bdl"
	"github.com/tracingplane/tracingplane-go/baggageprotocol"
	"github.com/tracingplane/tracingplane-go/atomlayer"
)

// An example of a class that would be generated by BDL for XTrace

type XTraceMetadata struct {
	TaskID *int64							// fixed64 taskID = 0
	ParentEventIDs map[int64](struct{})		// set<fixed64> parentEventIDs = 1
	Overflowed bool
	Unknown []atomlayer.Atom				// Atoms that aren't part of the XTraceMetadata spec, but were present
}


func (xTraceMetadata *XTraceMetadata) Read(r *baggageprotocol.Reader) {
	// TaskID
	if r.EnterIndexed(0) {
		xTraceMetadata.TaskID = bdl.ReadInt64Fixed(r.Next());
		r.Exit()
	}

	// ParentEventIDs
	if r.EnterIndexed(1) {
		xTraceMetadata.ParentEventIDs = make(map[int64](struct{}))
		for {
			next := r.Next()
			if next == nil { break }
			parentEventID := bdl.ReadInt64Fixed(next)
			if parentEventID != nil { xTraceMetadata.ParentEventIDs[*parentEventID] = struct{}{} }
		}
		r.Exit()
	}

	// Overflow
	xTraceMetadata.Overflowed = r.Overflowed
}

func (xTraceMetadata *XTraceMetadata) Write(w *baggageprotocol.Writer) {
	// TaskID
	if xTraceMetadata.TaskID != nil {
		w.Enter(0)
		w.Write(bdl.WriteInt64Fixed(*xTraceMetadata.TaskID))
		w.Exit()
	}

	// ParentEventIDs
	if len(xTraceMetadata.ParentEventIDs) > 0 {
		var parentEventIDs [][]byte
		for parentEventID := range(xTraceMetadata.ParentEventIDs) {
			parentEventIDs = append(parentEventIDs, bdl.WriteInt64Fixed(parentEventID))
		}

		w.Enter(1)
		w.WriteSorted(parentEventIDs...)
		w.Exit()
	}

	// Overflow
	if xTraceMetadata.Overflowed {
		w.MarkOverflow()
	}
}

func (xTraceMetadata *XTraceMetadata) SetUnprocessedAtoms(atoms []atomlayer.Atom) {
	xTraceMetadata.Unknown = atoms
}