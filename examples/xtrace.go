package examples

import (
	"github.com/tracingplane/tracingplane-go/bdl"
	"github.com/tracingplane/tracingplane-go/baggageprotocol"
	"github.com/tracingplane/tracingplane-go/atomlayer"
)

// An example of a class that would be generated by BDL for XTrace

type XTraceMetadata struct {
	taskID         *int64               // fixed64 taskID = 0
	parentEventIDs map[int64](struct{}) // set<fixed64> parentEventIDs = 1
	overflowed     bool
	unknown        []atomlayer.Atom				// Atoms that aren't part of the XTraceMetadata spec, but were present
}

func (xTraceMetadata *XTraceMetadata) HasTaskID() bool {
	return xTraceMetadata.taskID != nil
}

func (xTraceMetadata *XTraceMetadata) GetTaskID() int64 {
	return *xTraceMetadata.taskID
}

func (xTraceMetadata *XTraceMetadata) SetTaskID(taskID int64)  {
	xTraceMetadata.taskID = &taskID
}

func (xTraceMetadata *XTraceMetadata) ParentEventIDsCount() int {
	return len(xTraceMetadata.parentEventIDs)
}

func (xTraceMetadata *XTraceMetadata) AddParentEventID(parentEventIDs ...int64) {
	if xTraceMetadata.parentEventIDs == nil { xTraceMetadata.parentEventIDs = make(map[int64](struct{})) }
	for _,parentEventID := range(parentEventIDs) {
		xTraceMetadata.parentEventIDs[parentEventID] = struct{}{}
	}
}

func (xTraceMetadata *XTraceMetadata) RemoveParentEventID(parentEventID int64) {
	delete(xTraceMetadata.parentEventIDs, parentEventID)
}

func (xTraceMetadata *XTraceMetadata) ClearParentEventIDs() {
	xTraceMetadata.parentEventIDs = nil
}

func (xTraceMetadata *XTraceMetadata) GetParentEventIDs() (parentEventIDs []int64) {
	for parentEventID := range(xTraceMetadata.parentEventIDs) {
		parentEventIDs = append(parentEventIDs, parentEventID)
	}
	return
}

func (xTraceMetadata *XTraceMetadata) Overflowed() bool {
	return xTraceMetadata.overflowed
}


func (xTraceMetadata *XTraceMetadata) Read(r *baggageprotocol.Reader) {
	// taskID
	if r.EnterIndexed(0) {
		xTraceMetadata.taskID = bdl.ReadInt64Fixed(r.Next());
		r.Exit()
	}

	// parentEventIDs
	if r.EnterIndexed(1) {
		xTraceMetadata.parentEventIDs = make(map[int64](struct{}))
		for {
			next := r.Next()
			if next == nil { break }
			parentEventID := bdl.ReadInt64Fixed(next)
			if parentEventID != nil { xTraceMetadata.parentEventIDs[*parentEventID] = struct{}{} }
		}
		r.Exit()
	}

	// Overflow
	xTraceMetadata.overflowed = r.Overflowed
}

func (xTraceMetadata *XTraceMetadata) Write(w *baggageprotocol.Writer) {
	// taskID
	if xTraceMetadata.taskID != nil {
		w.Enter(0)
		w.Write(bdl.WriteInt64Fixed(*xTraceMetadata.taskID))
		w.Exit()
	}

	// parentEventIDs
	if len(xTraceMetadata.parentEventIDs) > 0 {
		var parentEventIDs [][]byte
		for parentEventID := range(xTraceMetadata.parentEventIDs) {
			parentEventIDs = append(parentEventIDs, bdl.WriteInt64Fixed(parentEventID))
		}

		w.Enter(1)
		w.WriteSorted(parentEventIDs...)
		w.Exit()
	}

	// Overflow
	if xTraceMetadata.overflowed {
		w.MarkOverflow()
	}
}

func (xTraceMetadata *XTraceMetadata) SetUnprocessedAtoms(atoms []atomlayer.Atom) {
	xTraceMetadata.unknown = atoms
}

func (xTraceMetadata *XTraceMetadata) GetUnprocessedAtoms() []atomlayer.Atom {
	return xTraceMetadata.unknown
}